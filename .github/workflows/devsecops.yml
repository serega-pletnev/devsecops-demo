name: DevSecOps CI (SAST/SCA/Secrets/Image + local DAST)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps (best effort)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt || true
          fi

  semgrep:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep (SARIF)
        run: |
          docker run --rm -e SEMGREP_SEND_METRICS=auto \
            -v "$PWD:/src" -w /src returntocorp/semgrep:latest \
            semgrep ci --sarif --output semgrep.sarif || true
          [ -s semgrep.sarif ] || printf '%s' \
            '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"semgrep"}},"results":[]}]}'> semgrep.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: semgrep.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: semgrep.sarif, path: semgrep.sarif }

  trivy_fs:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS -> trivy-fs.sarif
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-fs.sarif
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          ignore-unfixed: true
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: trivy-fs.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: trivy-fs.sarif, path: trivy-fs.sarif }

  gitleaks:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks (SARIF)
        run: |
          docker run --rm -v "$PWD:/work" -w /work zricethezav/gitleaks:latest \
            detect --redact --no-git --report-format sarif --report-path gitleaks.sarif || true
          [ -s gitleaks.sarif ] || printf '%s' \
            '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"gitleaks"}},"results":[]}]}'> gitleaks.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: gitleaks.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: gitleaks.sarif, path: gitleaks.sarif }

  pip_audit:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install pip-audit and deps
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit || true
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt || true
          fi
      - name: Run pip-audit -> pip-audit.sarif
        run: |
          pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
          [ -s pip-audit.sarif ] || printf '%s' \
            '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"pip-audit"}},"results":[]}]}'> pip-audit.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: pip-audit.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: pip-audit.sarif, path: pip-audit.sarif }

  image_scan:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image (app:demo)
        run: docker build -t app:demo .
      - name: Trivy image -> trivy-image.sarif
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: app:demo
          format: sarif
          output: trivy-image.sarif
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          ignore-unfixed: true
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: trivy-image.sarif }
      - uses: actions/upload-artifact@v4
        with: { name: trivy-image.sarif, path: trivy-image.sarif }

  dast_local:
    needs: [ image_scan, semgrep, trivy_fs, gitleaks, pip_audit ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create net
        run: docker network create net || true

      - name: Build image (for DAST)
        run: docker build -t app:demo .

      - name: Run app container
        run: |
          docker rm -f app || true
          docker run -d --rm --name app --network net app:demo

      - name: Wait readiness (120s)
        run: |
          set -e
          for i in $(seq 1 120); do
            if docker run --rm --network net curlimages/curl:8.8.0 \
                 -fsS http://app:8000/ >/dev/null; then
              echo "App is ready"; exit 0
            fi
            sleep 1
          done
          echo "App not ready in time" >&2
          docker logs --tail 200 app || true
          exit 1

      # ---------- ROBUST pull of ZAP image ----------
      - name: Resolve & pull ZAP image (GHCR ➜ GHCR-stable ➜ Hub-weekly ➜ Hub-stable)
        env:
          GH_USER: ${{ github.actor }}
          GH_TOKEN: ${{ github.token }}
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          set -euo pipefail
          # best-effort логины (уменьшают лимиты/ошибки)
          if [ -n "${GH_TOKEN:-}" ]; then
            echo "${GH_TOKEN}" | docker login ghcr.io -u "${GH_USER}" --password-stdin || true
          fi
          if [ -n "${DH_USER:-}" ] && [ -n "${DH_TOKEN:-}" ]; then
            echo "${DH_TOKEN}" | docker login -u "${DH_USER}" --password-stdin || true
          fi

          CANDS=(
            ghcr.io/zaproxy/zaproxy:stable
            ghcr.io/zaproxy/zaproxy:weekly
            owasp/zap2docker-stable:latest
            owasp/zap2docker-weekly:latest
          )
          IMG=""
          for C in "${CANDS[@]}"; do
            for i in $(seq 1 5); do
              echo "Pulling $C (try $i/5)..."
              if docker pull "$C" >/dev/null 2>&1; then IMG="$C"; break 2; fi
              sleep $((2*i))
            done
          done
          if [ -z "$IMG" ]; then
            echo "No ZAP image could be pulled from GHCR or Docker Hub" >&2
            exit 1
          fi
          echo "Using ZAP image: $IMG"
          echo "IMG=$IMG" >> "$GITHUB_ENV"

      - name: ZAP Baseline -> zap.json & zap.html
        run: |
          docker run --rm --network net \
            -v "$PWD:/zap/wrk" -w /zap/wrk "$IMG" \
            zap-baseline.py -t http://app:8000 -J zap.json -w zap.html -T 60 -I || true
          [ -f zap.json ] || printf '%s' \
            '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"ZAP Baseline"}},"results":[]}]}'> zap.json
          [ -f zap.html ] || echo '<html><body><h3>ZAP baseline produced no output</h3></body></html>' > zap.html

      - name: Upload DAST artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zap-artifacts
          path: |
            zap.json
            zap.html

      - name: Cleanup
        run: |
          docker rm -f app || true
          docker network rm net || true

  gate:
    needs: dast_local
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: echo "All scanners finished. See artifacts and the Security tab for SARIF results."

