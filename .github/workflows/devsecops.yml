name: DevSecOps CI (SAST/SCA/Secrets/Image + local DAST)

on:
  push:

permissions:
  contents: read
  security-events: write

concurrency:
  group: devsecops-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Smoke test
        run: python -m py_compile app/main.py

  semgrep:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep (SARIF)
        run: |
          docker run --rm -v "$PWD:/src" returntocorp/semgrep:latest \
            semgrep scan --config p/ci --metrics=off \
            --exclude .git --sarif --output /src/semgrep.sarif /src || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif

  trivy_fs:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS -> trivy-fs.sarif
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-fs.sarif
          ignore-unfixed: true
          vuln-type: os,library
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          list-all-pkgs: false
          limit-severities-for-sarif: true
          exit-code: "0"
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.sarif
          path: trivy-fs.sarif

  gitleaks:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks (SARIF)
        run: |
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect -s /repo -f sarif -o /repo/gitleaks.sarif || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks.sarif
          path: gitleaks.sarif

  pip_audit:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install pip-audit
        run: python -m pip install --upgrade pip pip-audit
      - name: Run pip-audit -> pip-audit.sarif
        shell: bash
        run: |
          set -e
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
          fi
          if [ ! -s pip-audit.sarif ]; then
            python - <<'PY'
import json
payload = {
  "version":"2.1.0",
  "$schema":"https://json.schemastore.org/sarif-2.1.0.json",
  "runs":[{"tool":{"driver":{"name":"pip-audit"}},"results":[]}]
}
open("pip-audit.sarif","w").write(json.dumps(payload))
PY
          fi
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: pip-audit.sarif
          path: pip-audit.sarif

  image_scan:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Build image app:demo
        run: docker build -t app:demo .
      - name: Trivy image -> trivy-image.sarif
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: app:demo
          format: sarif
          output: trivy-image.sarif
          ignore-unfixed: true
          vuln-type: os,library
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          limit-severities-for-sarif: true
          exit-code: "0"
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif

  dast_local:
    runs-on: ubuntu-latest
    needs: [semgrep, trivy_fs, gitleaks, pip_audit, image_scan]
    steps:
      - uses: actions/checkout@v4
      - name: Create network
        run: docker network create net || true
      - name: Build app image
        run: docker build -t app:demo .
      - name: Stop old app if exists
        run: docker rm -f app || true
      - name: Run app container
        run: docker run -d --rm --name app --network net -p 8000:8000 app:demo
      - name: Wait readiness (HTTP 200/404 accepted)
        run: |
          for i in $(seq 1 180); do
            if curl -sS -o /dev/null http://127.0.0.1:8000/; then
              exit 0
            fi
            sleep 1
          done
          docker logs app || true
          exit 1
      - name: ZAP baseline -> zap.json & zap.html
        run: |
          mkdir -p zap
          IMG=owasp/zap2docker-stable:latest
          docker run --rm --network net -v "$PWD/zap:/zap/wrk" "$IMG" \
            zap-baseline.py -t http://app:8000/ -J zap.json -w zap.html -T 60 -I || true
      - uses: actions/upload-artifact@v4
        with:
          name: zap.json
          path: zap/zap.json
      - uses: actions/upload-artifact@v4
        with:
          name: zap.html
          path: zap/zap.html
      - name: Cleanup
        if: always()
        run: |
          docker rm -f app || true
          docker network rm net || true

  gate:
    runs-on: ubuntu-latest
    needs: [semgrep, trivy_fs, gitleaks, pip_audit, image_scan, dast_local]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "*"
          merge-multiple: true
          path: artifacts
      - name: Evaluate gates
        run: |
          set -euo pipefail
          cd artifacts
          count() { [ -s "$1" ] && jq -r '[.runs[].results] | flatten | length' "$1" || echo 0; }
          SEMGREP=$(count semgrep.sarif || echo 0)
          TRIVY_FS=$(count trivy-fs.sarif || echo 0)
          TRIVY_IMG=$(count trivy-image.sarif || echo 0)
          GITLEAKS=$(count gitleaks.sarif || echo 0)
          PIP_AUDIT=$(count pip-audit.sarif || echo 0)
          ZAP_TOTAL=$( [ -s zap.json ] && jq -r '[.site[].alerts] | flatten | length' zap.json || echo 0 )
          echo "Semgrep: $SEMGREP"
          echo "Trivy FS: $TRIVY_FS"
          echo "Trivy Image: $TRIVY_IMG"
          echo "Gitleaks: $GITLEAKS"
          echo "pip-audit: $PIP_AUDIT"
          echo "ZAP total: $ZAP_TOTAL"
          FAIL=0
          if [ "$GITLEAKS" -gt 0 ]; then echo "::error::Gitleaks=$GITLEAKS"; FAIL=1; fi
          if [ "$ZAP_TOTAL" -gt 10 ]; then echo "::warning::ZAP=$ZAP_TOTAL (>10)"; fi
          [ "$FAIL" -ne 0 ] && exit 1 || true

