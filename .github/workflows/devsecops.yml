name: DevSecOps CI (SAST/SCA/Secrets/Image + local DAST)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  semgrep:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep (SARIF)
        run: |
          docker run --rm -v "$PWD:/src" returntocorp/semgrep:latest \
            semgrep scan --config auto --sarif --output /src/semgrep.sarif --metrics=off || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep
          path: semgrep.sarif

  trivy_fs:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          scanners: vuln,secret,config
          ignore-unfixed: true
          format: sarif
          output: trivy-fs.sarif
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          exit-code: "0"
          hide-progress: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-fs
          path: trivy-fs.sarif

  image_scan:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t app:test .
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: app:test
          ignore-unfixed: true
          format: sarif
          output: trivy-image.sarif
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          exit-code: "0"
          hide-progress: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image
          path: trivy-image.sarif

  gitleaks:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks (SARIF + JSON)
        run: |
          docker run --rm -v "$PWD:/repo" -w /repo zricethezav/gitleaks:latest detect \
            --no-git --redact --report-format sarif --report-path /repo/gitleaks.sarif || true
          docker run --rm -v "$PWD:/repo" -w /repo zricethezav/gitleaks:latest detect \
            --no-git --redact --report-format json  --report-path /repo/gitleaks.json  || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks
          path: |
            gitleaks.sarif
            gitleaks.json

  dast_local:
    runs-on: ubuntu-latest
    needs: [image_scan]
    steps:
      - uses: actions/checkout@v4

      - name: Build app image (local)
        run: docker build -t app:test .

      - name: Prepare network & run app
        run: |
          docker rm -f app 2>/dev/null || true
          docker network rm zapnet 2>/dev/null || true
          docker network create zapnet
          docker run -d --name app --network zapnet -p 8000:8000 app:test

      - name: Wait readiness (max 8 min)
        run: |
          for i in $(seq 1 96); do
            if curl -fsS http://127.0.0.1:8000/ >/dev/null 2>&1; then
              echo "app is up"; exit 0
            fi
            sleep 5
          done
          echo "App not ready"; docker logs app || true; exit 1

      - name: ZAP Baseline -> zap.json & zap.html (non-fatal, with fallback)
        run: |
          mkdir -p zap
          docker run --rm --network zapnet -v "$PWD/zap:/zap/wrk" \
            ghcr.io/zaproxy/zap2docker-stable:latest zap-baseline.py \
            -t http://app:8000/ -J zap.json -r zap.html -w zap.md -I -m 3 || true
          # fallback: host network (если DNS контейнера не сработал)
          test -f zap/zap.json || docker run --rm --network host -v "$PWD/zap:/zap/wrk" \
            ghcr.io/zaproxy/zap2docker-stable:latest zap-baseline.py \
            -t http://127.0.0.1:8000/ -J zap.json -r zap.html -w zap.md -I -m 3 || true

      - uses: actions/upload-artifact@v4
        with:
          name: dast
          path: zap/

  gate:
    runs-on: ubuntu-latest
    needs: [semgrep, trivy_fs, image_scan, gitleaks, dast_local]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Quick gate (fail on secrets; остальные выводим счётчики)
        run: |
          set -e
          semgrep_cnt=$(jq '[.runs[].results[]?] | length' artifacts/semgrep/semgrep.sarif 2>/dev/null || echo 0)
          trivy_fs_cnt=$(jq '[.runs[].results[]?] | length' artifacts/trivy-fs/trivy-fs.sarif 2>/dev/null || echo 0)
          trivy_img_cnt=$(jq '[.runs[].results[]?] | length' artifacts/trivy-image/trivy-image.sarif 2>/dev/null || echo 0)
          leaks_cnt=$(jq '.leaks | length' artifacts/gitleaks/gitleaks.json 2>/dev/null || echo 0)
          echo "semgrep=$semgrep_cnt trivy_fs=$trivy_fs_cnt trivy_image=$trivy_img_cnt gitleaks=$leaks_cnt"
          if [ "$leaks_cnt" -gt 0 ]; then
            echo "❌ gitleaks found $leaks_cnt secret(s)"; exit 1
          fi

