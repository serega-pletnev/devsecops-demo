name: DevSecOps CI (Semgrep/Trivy/Gitleaks/pip-audit/ZAP + gate)

on:
  push:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write   # нужно для upload-sarif

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Smoke test (import app)
        run: python -c "import app.main; print('app OK')" 

  # -------- SAST / Secrets --------
  semgrep:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep -> semgrep.sarif
        env:
          SEMGREP_SEND_METRICS: off
        run: |
          docker run --rm -v "$PWD:/src" returntocorp/semgrep:latest \
            semgrep --config auto --sarif -o /src/semgrep.sarif /src || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep
          path: semgrep.sarif

  trivy_fs:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS -> trivy-fs.sarif
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-fs.sarif
          ignore-unfixed: true
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy_fs
          path: trivy-fs.sarif

  gitleaks:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks -> gitleaks.sarif
        run: |
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect -s /repo -f sarif -r /repo/gitleaks.sarif || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks
          path: gitleaks.sarif

  pip_audit:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install deps
        run: |
          pip install -r requirements.txt
          pip install 'pip-audit>=2.7.0'

      - name: Run pip-audit (SARIF) and ensure file exists
        shell: bash
        run: |
          set -e
          pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
          if [ ! -s pip-audit.sarif ]; then
            echo "::warning::pip-audit did not produce SARIF; creating empty report"
            cat > pip-audit.sarif <<'SARIF'
          { "version": "2.1.0",
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "runs": [ { "tool": { "driver": { "name": "pip-audit",
            "informationUri": "https://github.com/pypa/pip-audit", "rules": [] } },
            "results": [] } ] }
SARIF
          fi

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif

      - name: Upload pip-audit artifact
        uses: actions/upload-artifact@v4
        with:
          name: pip_audit
          path: pip-audit.sarif

  # -------- Build image + image scan --------
  image_scan:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t app:demo .

      - name: Trivy image -> trivy-image.sarif
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: app:demo
          format: sarif
          output: trivy-image.sarif
          vuln-type: os,library
          ignore-unfixed: true
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy_image
          path: trivy-image.sarif

  # -------- Local DAST (ZAP Baseline) --------
  dast_local:
    runs-on: ubuntu-latest
    needs: [image_scan, semgrep, trivy_fs, gitleaks, pip_audit]
    steps:
      - uses: actions/checkout@v4

      - name: Create docker network
        run: docker network create net || true

      - name: Build app (if not built yet)
        run: docker build -t app:demo .

      - name: Run app
        run: |
          docker rm -f app || true
          docker run -d --rm --name app --network net -p 8000:8000 app:demo

      - name: Wait readiness
        run: |
          for i in $(seq 1 120); do
            if curl -fsS http://127.0.0.1:8000/ >/dev/null; then
              echo "App is ready"; exit 0
            fi
            sleep 1
          done
          echo "App not ready"; exit 1

      - name: Choose ZAP image (ghcr -> dockerhub fallback)
        run: echo IMG=ghcr.io/zaproxy/zap2docker-stable:latest >> $GITHUB_ENV

      - name: Pull ZAP image (with fallback)
        run: |
          docker pull "$IMG" || { docker pull owasp/zap2docker-stable:latest; echo IMG=owasp/zap2docker-stable:latest >> $GITHUB_ENV; }

      - name: ZAP Baseline -> zap.json & zap.html
        run: |
          mkdir -p zap/wrk
          docker run --rm --network net -v "$PWD/zap:/zap" "$IMG" \
            zap-baseline.py -t http://app:8000/ -J /zap/wrk/zap.json -w /zap/wrk/zap.html -T 90 -I || true

      - name: Upload DAST artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zap_baseline
          path: |
            zap/wrk/zap.json
            zap/wrk/zap.html

      - name: Stop app
        run: docker rm -f app || true

  # -------- Gate --------
  gate:
    runs-on: ubuntu-latest
    needs: [image_scan, semgrep, trivy_fs, gitleaks, pip_audit, dast_local]
    steps:
      - name: Gate PRE (demo)
        run: |
          echo "All checks finished. (Plug real gates here if нужно.)"

