name: DevSecOps CI (SAST/SCA/Secrets/Image + local DAST)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: requirements.txt
      - run: pip install -r requirements.txt
      - run: python -c "import app.main as m; print('OK')"

  semgrep:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep
        run: |
          docker run --rm \
            -e SEMGREP_SEND_METRICS=off \
            -v "$PWD":/src returntocorp/semgrep:latest \
            semgrep --config p/ci --sarif -o /src/semgrep.sarif --error /src
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep
          path: semgrep.sarif

  trivy_fs:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-fs.sarif"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
          scanners: "vuln,secret"
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy_fs
          path: trivy-fs.sarif

  gitleaks:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Gitleaks
        run: |
          docker run --rm -v "$PWD":/repo zricethezav/gitleaks:latest \
            detect --source=/repo --report-format sarif --report-path /repo/gitleaks.sarif --no-banner --exit-code 0
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks
          path: gitleaks.sarif

  pip_audit:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: requirements.txt
      - run: pip install -r requirements.txt
      - run: pip install pip-audit
      - run: pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: pip_audit
          path: pip-audit.sarif

  image_scan:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          tags: app:demo
          load: false
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/app.tar
      - run: docker load -i /tmp/app.tar
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: "image"
          image-ref: "app:demo"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-image.sarif"
          vuln-type: "os,library"
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
      - uses: anchore/sbom-action@v0
        with:
          image: "app:demo"
          artifact-name: "sbom.cdx.json"
          format: "cyclonedx-json"
      - uses: actions/upload-artifact@v4
        with:
          name: trivy_image
          path: trivy-image.sarif

  dast_local:
    runs-on: ubuntu-latest
    needs: [image_scan, semgrep, trivy_fs, gitleaks, pip_audit]
    steps:
      - uses: actions/checkout@v4
      - run: docker network create net || true
      - run: docker build -t app:demo .
      - run: docker rm -f app || true
      - run: docker run -d --rm --name app --network net -p 8000:8000 app:demo
      - run: |
          for i in $(seq 1 120); do
            if curl -fsS http://localhost:8000/ >/dev/null 2>&1; then exit 0; fi
            sleep 2
          done
          exit 1
      - run: echo IMG=ghcr.io/zaproxy/zap2docker-stable:latest >> $GITHUB_ENV
      - name: Pull ZAP image with fallback
        run: |
          docker pull "$IMG" || { docker pull owasp/zap2docker-stable:latest && echo IMG=owasp/zap2docker-stable:latest >> $GITHUB_ENV; }
      - run: |
          mkdir -p zap/wrk
          docker run --rm --network net -v "$PWD/zap/wrk":/zap/wrk "$IMG" \
            zap-baseline.py -t http://app:8000/ -J zap.json -w zap.html -T 60 -I || true
      - uses: actions/upload-artifact@v4
        with:
          name: zap
          path: |
            zap/wrk/zap.json
            zap/wrk/zap.html

  gate:
    runs-on: ubuntu-latest
    needs: dast_local
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: zap
          path: .
      - run: |
          ZAP_JSON="./zap.json"
          if [ ! -f "$ZAP_JSON" ]; then
            echo "ZAP report not found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          H=$(jq '[.site[].alerts[] | select(.riskcode=="3")] | length' "$ZAP_JSON")
          M=$(jq '[.site[].alerts[] | select(.riskcode=="2")] | length' "$ZAP_JSON")
          echo "High: $H  Medium: $M" >> $GITHUB_STEP_SUMMARY
          if [ "$H" -gt 0 ] || [ "$M" -gt 5 ]; then
            exit 1
          fi

