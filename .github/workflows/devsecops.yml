name: DevSecOps CI (SAST/SCA/Secrets/Image + local DAST)

on:
  push:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt
      - run: python app/main.py --help || true

  semgrep:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - run: docker run --rm -v "$PWD:/src" returntocorp/semgrep:latest semgrep scan --config p/ci --sarif --output semgrep.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif

  trivy_fs:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-fs.sarif
          hide-progress: true
          ignore-unfixed: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: cyclonedx
          output: sbom.cdx.json
          hide-progress: true
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: sbom.cdx.json
          path: sbom.cdx.json

  gitleaks:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - uses: gitleaks/gitleaks-action@v2
        with:
          args: --no-git --report-format sarif --report-path gitleaks.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks.sarif
          path: gitleaks.sarif

  image_scan:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t app:test .
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: app:test
          format: sarif
          output: trivy-image.sarif
          hide-progress: true
          ignore-unfixed: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif

  dast_local:
    runs-on: ubuntu-latest
    needs: build_test
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t app:test .
      - run: docker network create scan || true
      - run: |
          docker rm -f app || true
          docker run -d --name app --network scan -p 3000:3000 app:test
      - run: |
          for i in $(seq 1 60); do
            if curl -fsS http://localhost:3000/ >/dev/null; then exit 0; fi
            sleep 5
          done
          docker logs app
          exit 1
      - run: |
          docker pull ghcr.io/zaproxy/zap2docker-stable:latest || docker pull owasp/zap2docker-stable:latest
      - continue-on-error: true
        run: |
          img="ghcr.io/zaproxy/zap2docker-stable:latest"
          docker image inspect "$img" >/dev/null 2>&1 || img="owasp/zap2docker-stable:latest"
          docker run --rm --network scan -v "$PWD:/zap/wrk" -t "$img" \
            zap-baseline.py -I -m 5 -T 5 -t http://app:3000 \
            -x zap.xml -J zap.json -r zap.html
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast
          path: |
            zap.json
            zap.html
            zap.xml
      - if: always()
        run: |
          docker logs app || true
          docker rm -f app || true
          docker network rm scan || true

  gate:
    runs-on: ubuntu-latest
    needs: [semgrep, trivy_fs, gitleaks, image_scan, dast_local]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dast
          path: dast
      - run: sudo apt-get update && sudo apt-get install -y jq
      - run: |
          FILE="dast/zap.json"
          if [ ! -s "$FILE" ]; then
            echo "No ZAP JSON; skipping gate"; exit 0
          fi
          highs=$(jq '[.site[].alerts[] | select(.riskcode=="3")] | length' "$FILE")
          meds=$(jq '[.site[].alerts[] | select(.riskcode=="2")] | length' "$FILE")
          echo "High: $highs  Medium: $meds"
          if [ "$highs" -gt 0 ] || [ "$meds" -gt 5 ]; then
            echo "::error::DAST gate failed (High=$highs, Medium=$meds)"; exit 1
          fi
          echo "DAST gate passed"
