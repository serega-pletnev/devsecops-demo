name: DevSecOps CI (SAST/SCA/Secrets/Image + local DAST)

on:
  push:
  pull_request:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: |
          python -V
          pip install -r requirements.txt
          python app/main.py || true

  semgrep:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker run --rm -v "$PWD:/src" returntocorp/semgrep:latest \
            semgrep scan --config p/ci --metrics=off --sarif -o /src/semgrep.sarif /src || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif

  trivy_fs:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-fs.sarif
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          ignore-unfixed: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.sarif
          path: trivy-fs.sarif

  gitleaks:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker run --rm -v "$PWD:/repo" -w /repo zricethezav/gitleaks:latest \
            detect -v -s /repo -f sarif -r /repo/gitleaks.sarif || true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks.sarif
          path: gitleaks.sarif

  pip_audit:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install pip-audit -r requirements.txt
      - name: Run pip-audit and produce SARIF
        run: |
          set -e
          pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
          if [ ! -s pip-audit.sarif ]; then
            printf '%s' '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"pip-audit","informationUri":"https://github.com/pypa/pip-audit","rules":[]}},"results":[]}]}'> pip-audit.sarif
          fi
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: pip-audit.sarif
          path: pip-audit.sarif

  image_scan:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t app:demo .
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: app:demo
          format: sarif
          output: trivy-image.sarif
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          ignore-unfixed: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif

  dast_local:
    needs: [semgrep, trivy_fs, gitleaks, pip_audit, image_scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: docker network create net || true
      - run: docker build -t app:demo .
      - run: docker rm -f app || true
      - run: docker run -d --rm --name app --network net -p 8000:8000 app:demo
      - name: Wait readiness
        run: |
          for i in $(seq 1 120); do
            if curl -fsS http://app:8000/ >/dev/null 2>&1; then exit 0; fi
            sleep 1
          done
          exit 1
      - name: Run ZAP baseline
        run: |
          mkdir -p zap
          IMG=owasp/zap2docker-stable:latest
          docker run --rm --network net -v "$PWD/zap:/zap/wrk" "$IMG" \
            zap-baseline.py -t http://app:8000/ -J zap.json -w zap.html -T 60 -I || true
      - uses: actions/upload-artifact@v4
        with:
          name: zap.json
          path: zap/zap.json
      - uses: actions/upload-artifact@v4
        with:
          name: zap.html
          path: zap/zap.html
      - run: docker rm -f app || true
      - run: docker network rm net || true

  gate:
    needs: dast_local
    runs-on: ubuntu-latest
    steps:
      - run: echo "All checks finished"

