name: DevSecOps CI (SAST/SCA/Secrets/Image + local DAST)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install -r requirements.txt
      - run: python -c "print('ok')"

  semgrep:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - run: docker run --rm -v "$PWD:/src" -w /src -e SEMGREP_SEND_METRICS=off returntocorp/semgrep:latest semgrep scan --config p/ci --exclude .git --sarif --output semgrep.sarif --error
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  trivy_fs:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-fs.sarif
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.sarif
          path: trivy-fs.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

  gitleaks:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - run: docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest detect --source=/repo --report-format sarif --report-path /repo/gitleaks.sarif --redact --no-git
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks.sarif
          path: gitleaks.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  image_scan:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t app:demo .
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: app:demo
          format: sarif
          output: trivy-image.sarif
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          ignore-unfixed: true
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

  dast_local:
    runs-on: ubuntu-latest
    needs: image_scan
    steps:
      - uses: actions/checkout@v4

      - run: docker network create net || true
      - run: docker rm -f app || true
      - run: docker build -t app:demo .
      - run: docker run -d --rm --name app --network net -p 8000:8000 app:demo

      - name: Wait until app is ready
        run: |
          for i in $(seq 1 120); do
            code=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8000/ || true)
            if [ "$code" != "000" ] && [ "$code" -lt 500 ]; then exit 0; fi
            sleep 2
          done
          docker logs app || true
          exit 1

      - name: ZAP Baseline (via official action)
        uses: zaproxy/action-baseline@v0.13.0
        with:
          target: http://localhost:8000
          cmd_options: "-J zap.json -w zap.html -T 60 -I"
          token: ${{ secrets.GITHUB_TOKEN }}

      # Подберём любой HTML-отчёт, если имя отличается от zap.html
      - name: Pick ZAP HTML
        id: pick_html
        run: |
          set -e
          HTML="$(ls -1 *.html 2>/dev/null | head -n1 || true)"
          echo "HTML=${HTML}" >> "$GITHUB_ENV"

      - name: Upload ZAP JSON
        uses: actions/upload-artifact@v4
        with:
          name: zap.json
          path: zap.json

      - name: Upload ZAP HTML (if present)
        if: env.HTML != ''
        uses: actions/upload-artifact@v4
        with:
          name: zap.html
          path: ${{ env.HTML }}

      - run: docker rm -f app || true

  gate:
    runs-on: ubuntu-latest
    needs: [semgrep, trivy_fs, gitleaks, image_scan, dast_local]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: zap.json
          path: .
      - run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          H=$(jq '[.site[].alerts[] | select((.riskcode=="3") or (.riskdesc|test("High";"i"))) ] | length' zap.json)
          M=$(jq '[.site[].alerts[] | select((.riskcode=="2") or (.riskdesc|test("Medium";"i"))) ] | length' zap.json)
          echo "ZAP High=$H Medium=$M"
          if [ "$H" -gt 0 ] || [ "$M" -gt 5 ]; then exit 1; fi

