name: DevSecOps CI (SAST/SCA/Secrets/Image + local DAST)

on:
  push:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Smoke
        run: python -c "print('ok')"

  semgrep:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Semgrep scan -> semgrep.sarif
        run: |
          docker run --rm -v "$PWD:/src" returntocorp/semgrep:latest \
            semgrep scan --config auto --metrics=auto \
            --exclude-dir .git --exclude-dir node_modules \
            --sarif --output /src/semgrep.sarif || true
          if [ ! -s semgrep.sarif ]; then
            printf '%s' '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"semgrep"}},"results":[]}]}'> semgrep.sarif
          fi
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep.sarif
          path: semgrep.sarif

  trivy_fs:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS -> trivy-fs.sarif
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-fs.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true
          security-checks: 'vuln,secret,config,license'
          hide-progress: true
          github-pat: ${{ secrets.GITHUB_TOKEN }}
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.sarif
          path: trivy-fs.sarif

  image_scan:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -t app:demo .
      - name: Trivy image -> trivy-image.sarif
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'image'
          image-ref: 'app:demo'
          format: 'sarif'
          output: 'trivy-image.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true
          hide-progress: true
          github-pat: ${{ secrets.GITHUB_TOKEN }}
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif

  gitleaks:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Gitleaks -> gitleaks.sarif
        run: |
          docker run --rm -v "$PWD:/repo" zricethezav/gitleaks:latest \
            detect --source=/repo \
            --report-format=sarif --report-path=/repo/gitleaks.sarif || true
          if [ ! -s gitleaks.sarif ]; then
            printf '%s' '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"gitleaks"}},"results":[]}]}'> gitleaks.sarif
          fi
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks.sarif
          path: gitleaks.sarif

  pip_audit:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python -m pip install pip-audit
      - name: pip-audit -> pip-audit.sarif
        run: |
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
          else
            printf '%s' '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"pip-audit"}},"results":[]}]}'> pip-audit.sarif
          fi
          if [ ! -s pip-audit.sarif ]; then
            printf '%s' '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"pip-audit"}},"results":[]}]}'> pip-audit.sarif
          fi
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif
      - uses: actions/upload-artifact@v4
        with:
          name: pip-audit.sarif
          path: pip-audit.sarif

  dast_local:
    runs-on: ubuntu-latest
    needs: image_scan
    steps:
      - uses: actions/checkout@v4
      - name: Create net
        run: docker network create net || true
      - name: Build image (for DAST)
        run: docker build -t app:demo .
      - name: Run app
        run: |
          docker rm -f app || true
          docker run -d --rm --name app --network net -p 8000:8000 app:demo
      - name: Wait readiness
        timeout-minutes: 3
        run: |
          for i in $(seq 1 120); do
            docker run --rm --network net curlimages/curl:8.8.0 -sSf http://app:8000/docs >/dev/null && exit 0 || true
            sleep 1
          done
          echo "app not ready"; exit 1
      - name: Pull ZAP
        run: |
          set -e
          (docker pull ghcr.io/zaproxy/zap2docker-stable:latest && echo IMG=ghcr.io/zaproxy/zap2docker-stable:latest >> $GITHUB_ENV) || true
          if ! docker image inspect ghcr.io/zaproxy/zap2docker-stable:latest >/dev/null 2>&1; then
            docker pull owasp/zap2docker-stable:latest
            echo IMG=owasp/zap2docker-stable:latest >> $GITHUB_ENV
          fi
      - name: ZAP Baseline -> zap.json & zap.html
        run: |
          docker run --rm --network net -v "$PWD:/zap/wrk" "$IMG" \
            zap-baseline.py -t http://app:8000 -J zap.json -w zap.html -T 60 -I || true
      - uses: actions/upload-artifact@v4
        with:
          name: zap.json
          path: zap.json
      - uses: actions/upload-artifact@v4
        with:
          name: zap.html
          path: zap.html
      - name: Cleanup
        if: always()
        run: |
          docker rm -f app || true
          docker network rm net || true

  gate:
    runs-on: ubuntu-latest
    needs: [semgrep, trivy_fs, image_scan, gitleaks, pip_audit, dast_local]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Summary
        run: |
          echo "Artifacts downloaded:"
          find artifacts -type f -maxdepth 2 -print

